
name: 'Terraform deploy to Azure'

# specifying the event

on:
  push:
    branches:
      - main
  pull_request:

env:

 ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
 ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
 ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
 ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
 ROOT_PATH : '${{ github.workspace }}/sourcecode/terraform'




permissions:
  contents: read

jobs:
  terraform_plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    environment: production
  

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}
      

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt
      working-directory: ${{env.ROOT_PATH}}
      

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{env.ROOT_PATH}}


  terraform_apply:
    name: 'Terraform apply'
    needs: terraform_plan
    runs-on: ubuntu-latest
    environment: production
      
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3
    
        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
  

        # storing the state file in github secrets
        - name: Store Terraform state file in a Github Action secret
          run: 
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: terraform init
          working-directory: ${{env.ROOT_PATH}}


        # Generates an execution plan for Terraform
        - name: Terraform apply
          run: terraform apply --auto-approve
          working-directory: ${{env.ROOT_PATH}}


          










